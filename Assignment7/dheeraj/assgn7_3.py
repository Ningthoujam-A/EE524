# -*- coding: utf-8 -*-
"""assgn7_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HuaaHVKromF9SlXVpRrH5HAXiY6tjF8i
"""

import numpy as np

def unit_step_fun(x):
    return np.where(x>=0,1,0)

def train_data(x,y,lr,n_iter):
    waights=1
    bias=0
    for _ in range(n_iter):
        for indx, x_i in enumerate(x):
            output = np.dot(x_i, waights) + bias
            y_predict = unit_step_fun(output)
            uptades = lr * (y[indx] - y_predict)
            waights += uptades * x_i
            bias += uptades

    return waights,bias

def perceptron(x,w,b):
    y=np.dot(x,w)+b
    return unit_step_fun(y)

x=[[0,0],[0,1],[1,0],[1,1]]
y=[0,0,0,1]
trained_waights,trained_bias=train_data(x,y,.01,10000)
print(trained_waights)
print(trained_bias)

def and_logic_fun(x):
    w=trained_waights
    b=trained_bias[0]
    return perceptron(x,w,b)

t1=np.array([0,0])
t2=np.array([0,1])
t3=np.array([1,0])
t4=np.array([1,1])
print(and_logic_fun(t1))
print(and_logic_fun(t2))
print(and_logic_fun(t3))
print(and_logic_fun(t4))